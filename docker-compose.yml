version: "3.18"

services:
  db:
    image: postgres
    container_name: postgres
    env_file:
      - .env
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 5s
      timeout: 5s
      retries: 5
    volumes:
      - ./pgdata:/var/lib/postgresql/data
      - .:/docker-entrypoint-initdb.d
    environment:
      POSTGRES_PASSWORD: "postgres"

  redis:
    container_name: redis
    image: redis
    restart: unless-stopped
    ports:
      - "6380:6379"
    healthcheck:
      test: [ "CMD", "redis-cli", "--raw", "incr", "ping" ]

  nginx:
    container_name: nginx
    restart: always
    image: nginx:1.23-alpine
    ports:
      - "88:88"
    volumes:
      - ./docker/nginx/default.conf:/etc/nginx/conf.d/default.conf
      - ./media:/code/media
      - ./static:/code/static
    depends_on:
      api:
        condition: service_started
    links:
      - api

  api: 
    container_name: api
    build:
      context: .
    tty: false
    volumes:
      - ./media:/code/media
      - ./static:/code/static
    restart: on-failure
    ports:
      - "8080:8080"
    links:
      - redis
      - db
    depends_on:
      db:
        condition: service_healthy
    command: bash -c "python manage.py migrate --noinput & gunicorn config.wsgi --access-logfile - --workers 3 --bind 0.0.0.0:8080"


  celery-worker:
    container_name: celery-worker
    build: .
    command: bash -c "python3 manage.py celery_check_file & celery -A config worker -l info"
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy

  celery-beat:
    container_name: celery-beat
    build: .
    command: celery -A config beat -l info -S django
    depends_on:
      celery-worker:
        condition: service_started
